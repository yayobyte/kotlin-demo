name: Continuous Integration Demo

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main, feature/branch, master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - id: checkout
        uses: actions/checkout@v3
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      - name: Login with azure action
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'
          allow-no-subscriptions: true
      - name: Connect to kubernetes cluster
        uses: azure/aks-set-context@v1
        with:
          creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'
          cluster-name: githubactionskube
          resource-group: default_resource_group
      - run: |
          kubectl create namespace githubrg
      - name: Run CTL Apply
        if: always()
        run: |
          kubectl apply -f pod.yaml

      - name: get the dependency
        run: ${{ needs.build.outputs.tag}}

      - name: Run a multi-line script
        if: always()
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      - name: check java version
        run: java -version

      - name: gradle build
        run: gradle build

      - name: docker version
        run: |
          docker -v
          docker
          docker images -a
      - name: docker build
        run: |
          docker build . -t yayobyte/demo-kotlin2.0
          docker images -a
      - name: docker login
        run: docker login -u ${{ secrets.dockerhubusername }} -p ${{ secrets.dockerhubpassword }}
      - name: docker image push
        run: docker push yayobyte/demo-kotlin2.0
